
( compililation helpers for noct )
chain: noct'
: trace "( $- ) show a message and the data stack." :doc
  .s space '| puts cr ;
 
: readln "( ``-a ) read to end of line, return pointer to temp string" :docl
  remapping   ( flag: accept newlines as distinct from spaces? )
  &@ &off bi  ( remember the old value, then turn it off. )
  10 ` accept ( read until newline. #13 or #10 will work. )
  remapping ! ( restore old value of the remapping flag.  )
  tib ;       ( put the string's address on the stack and return )

( -- FOR loop compiler --------------------------------------- )

{{ ( Helper functions )
: relop dup 2 + @ 0 > [ &<= ] [ &>= ] if ;
: start dup 4 + 1 , , ;
: goal dup 3 + 1 , , ;
: by dup 2 + 1 , , ;
: quote dup 1 + 1 , , ;
---reveal---
: FOR ( start goal step quote - )
  ahead [ 5 allot ] dip here over !
  quote  ! by  ! goal  ! start  !
  repeat [
    start  @ goal  @ relop , 0;  drop
    start  @ by  @  + start  !
    quote  @ do
  ] dip again
  drop
; immediate
}}
 
( -- CONST compiler ---------------------------------------- )
 
: CONST "( ``- ) reads name to space, then value to newline." :doc
  create ( read the name and begin a definition with class .data )
  readln ( read the value )
  ( read characters up to the the linefeed [ascii char #10]. )
  ( the reason for using a newline is so we can read strings )
  ( that contain spaces or we can read a number. )
  ( TODO : strip out the double quotes if it is a string. )
  dup isNumber? [ toNumber ] [ keepString ] if
  @last !d->xt ;  ( store the value in the new header and return )
;chain
